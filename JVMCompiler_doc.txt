JVMCompiler Documentation

Dokumentacja implementacji JVMCompiler 


0. Stan

Stan = { code, nextVarID, functions, vars, }

- tylko funkcja analizujaca definicje funkcji dokonuje dodania do stanu nowego kodu
- wszystkie inne funkcje zwracaja dodatkowo kod ktory metoda wolajaca decyduje co zrobic z nim dalej


1. Defnicja funkcji

Fun args stms

- inicjowanie stanu srodowiska (np ustawienie nextVarID = 0)
- dodanie argumentow do zdefiniowanych funkcji
- sprawdzenie ciala funkcji
- analiza wygenerowanego kodu z ciala funkcji
--- ustalenie ile potrzeba stosu i lokalnych zmiennych
- dodanie intra i outra funkcji
- dodanie do kodu stanu ciala calej funkcji


2. Wyrazenie wartosciowe

(37 + 8) * 2

f(1 + 3 * 32) + 32

[E]

k + 32

k
load
const 32
add

- obliczamy zgodnie z budowa drzewa wyrazenia
- zawsze kod obliczenia wartosci zostawia na stosie wartosc obliczona


3. Wyrazenia boolowskie

(k == 32) && (i != 32)

k > 32

[B]


traktowanie 'and'

B1 and B2

		[B1]
		ANDFALSE_(linia and)_(kolumna and) IFFALSE
		[B2]
		ANDFALSE_(linia and)_(kolumna and) IFFALSE
		CONS true
		GOTO ANDEND(linia_and)_(kolumna and)
ANDFALSE_(linia and)_(kolumna and):
		CONST false
ANDEND(linia and)_(kolumna and):


traktowanie 'or'

B1 or B2

		[B1]
		ORTRUE_(linia or)_(kolumna or) IFTRUE
		[B2]
		ORTRUE_(linia or)_(kolumna or) IFTRUE
		CONS false
		GOTO OREND_(linia and)_(kolumna and)
ORTRUE_(linia or)_(kolumna or):
		CONST true
OREND_(linia or)_(kolumna or):


traktowanie 'not'

!E

		[E]
		NOTTRUE_(linia or)_(kolumna or) IFTRUE
		CONS true
		GOTO NOTEND_(linia and)_(kolumna and)
NOTTRUE_(linia or)_(kolumna or):
		CONST false
NOTEND_(linia or)_(kolumna or):


traktowanie '=='

E1 == E2

		[E1]
		[E2]
		EQTRUE_(linia or)_(kolumna or) IFEQ
		CONS false
		GOTO EQEND_(linia and)_(kolumna and)
EQTRUE_(linia or)_(kolumna or):
		CONST true
EQEND(linia or)_(kolumna or):



traktowanie '<'

E1 < E2

		[E1]
		[E2]
		LtTRUE_(linia or)_(kolumna or) IFGt
		CONS false
		GOTO EQEND_(linia and)_(kolumna and)
EQTRUE_(linia or)_(kolumna or):
		CONST true
EQEND(linia or)_(kolumna or):


traktowanie '+'

E1 + E2

		[E1]
		[E2]
		LtTRUE_(linia or)_(kolumna or) IFGt
		CONS false
		GOTO EQEND_(linia and)_(kolumna and)
EQTRUE_(linia or)_(kolumna or):
		CONST true
EQEND(linia or)_(kolumna or):





- obliczamy zgodnie z budowa drzewa wyrazenia
- zawsze kod obliczenia wartosci zostawia na stosie wartosc obliczona


4. Deklaracja zmiennej

int k = 32;

Type Var = [E]

[E]
adres_zmiennej
store

- dodanie zmiennej to stanu
- trzeba obliczyc kod dla E, wiadomo ze zostawi on wartosc E na szczycie stosu
- zapisac wartosc ze stosu pod numer zmiennej otrzymany wyzej

5. Przypisanie wartosci

l = 23;

Var = [E]

[E]
adres_zmiennej
store

- odnalezienie zmiennej w stanie
- trzeba obliczyc kod dla E, wiadomo ze zostawi on wartosc E na szczycie stosu
- zapisac wartosc ze stosu pod numer zmiennej otrzymany wyzej

6. Instrukcja warunkowa

if E1 then S1 else S2

		[E]
		IFELSE_(linia if)_(kolumna if) IFFALSE
		[S1]
		GOTO IFEND_(linia if)_(kolumna if)
IFELSE_(linia if)_(kolumna if):
		[S2]
IFEND_(linia if)_(kolumna if):

7.  Petle

Instrukcja while

while E do S

WHILE_(linia while)_(kolumna while):
		[E]
		ENDWHILE_(linia while)_(kolumna while) IFFALSE
		[S]
		GOTO WHILE_(linia while)_(kolumna while)
ENDWHILE_(linia while)_(kolumna while):


Instrukcja for

for ASSIG1 E ASSIG2 S

		[A1]
FOR_(linia while)_(kolumna while):
		[E]
		ENDFOR_(linia for)_(kolumna for) IFFALSE
		[S]
		[A2]
		GOTO FOR_(linia while)_(kolumna while)
ENDFOR_(linia while)_(kolumna while):
