-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.5 from JavaletteParser.y
-----------------------------------------------------------------------------

state 37 contains 1 shift/reduce conflicts.
state 146 contains 1 shift/reduce conflicts.

terminal ":" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_javaletteParse -> Program                   (0)
	Program -> FunctionList                            (1)
	FunctionList -> Function FunctionList              (2)
	FunctionList ->                                    (3)
	Function -> Type Ident "(" FunctionArgs ")" FunctionList "{" StmtList "}"   (4)
	FunctionArgs -> FunctionArg                        (5)
	FunctionArgs -> FunctionArg "," FunctionArgs       (6)
	FunctionArgs ->                                    (7)
	FunctionArg -> Type Var                            (8)
	Stmt -> StmtComp                                   (9)
	Stmt -> StmtDecl                                   (10)
	Stmt -> StmtAssig                                  (11)
	Stmt -> StmtIf                                     (12)
	Stmt -> StmtWhile                                  (13)
	Stmt -> StmtFor                                    (14)
	Stmt -> StmtReturn                                 (15)
	Stmt -> StmtExp                                    (16)
	StmtComp -> "{" StmtList "}"                       (17)
	StmtList -> Stmt StmtList                          (18)
	StmtList ->                                        (19)
	StmtDecl -> Type DeclList ";"                      (20)
	DeclList -> Decl                                   (21)
	DeclList -> Decl "," DeclList                      (22)
	Decl -> Var                                        (23)
	Decl -> Var "=" Exp                                (24)
	StmtAssig -> ExpAssig ";"                          (25)
	StmtIf -> "if" "(" Exp ")" Stmt                    (26)
	StmtIf -> "if" "(" Exp ")" Stmt "else" Stmt        (27)
	StmtWhile -> "while" "(" Exp ")" Stmt              (28)
	StmtFor -> "for" "(" Assig ";" Exp ";" Assig ")" Stmt   (29)
	StmtReturn -> "return" ";"                         (30)
	StmtReturn -> "return" Exp ";"                     (31)
	StmtExp -> Exp ";"                                 (32)
	Type -> "int"                                      (33)
	Type -> "double"                                   (34)
	Type -> "boolean"                                  (35)
	Type -> "void"                                     (36)
	Exp -> ExpOr                                       (37)
	Exp -> ExpAssig                                    (38)
	ExpAssig -> Assig                                  (39)
	Assig -> Var "=" ExpAddi                           (40)
	Assig -> Var "++"                                  (41)
	Assig -> Var "--"                                  (42)
	ExpOr -> ExpAnd                                    (43)
	ExpOr -> ExpOr "||" ExpAnd                         (44)
	ExpAnd -> ExpCompe                                 (45)
	ExpAnd -> ExpAnd "&&" ExpCompe                     (46)
	ExpCompe -> ExpRel                                 (47)
	ExpCompe -> ExpCompe "==" ExpRel                   (48)
	ExpCompe -> ExpCompe "!=" ExpRel                   (49)
	ExpRel -> ExpAddi                                  (50)
	ExpRel -> ExpRel "<" ExpAddi                       (51)
	ExpRel -> ExpRel ">" ExpAddi                       (52)
	ExpRel -> ExpRel "<=" ExpAddi                      (53)
	ExpRel -> ExpRel ">=" ExpAddi                      (54)
	ExpAddi -> ExpMulti                                (55)
	ExpAddi -> ExpAddi "+" ExpMulti                    (56)
	ExpAddi -> ExpAddi "-" ExpMulti                    (57)
	ExpMulti -> ExpOneArg                              (58)
	ExpMulti -> ExpMulti "*" ExpOneArg                 (59)
	ExpMulti -> ExpMulti "/" ExpOneArg                 (60)
	ExpMulti -> ExpMulti "%" ExpOneArg                 (61)
	ExpOneArg -> ExpOneArgNot                          (62)
	ExpOneArg -> "+" ExpOneArg                         (63)
	ExpOneArg -> "-" ExpOneArg                         (64)
	ExpOneArgNot -> ExpPostfix                         (65)
	ExpOneArgNot -> "!" ExpPostfix                     (66)
	ExpPostfix -> ExpSimp                              (67)
	ExpPostfix -> ExpCallFunc                          (68)
	ExpCallFunc -> Ident "(" ExpList ")"               (69)
	ExpList -> Exp                                     (70)
	ExpList -> Exp "," ExpList                         (71)
	ExpList ->                                         (72)
	ExpSimp -> Var                                     (73)
	ExpSimp -> Literal                                 (74)
	ExpSimp -> "(" Exp ")"                             (75)
	ExpSimp -> "(" "boolean" ")" ExpOneArgNot          (76)
	ExpSimp -> "(" "int" ")" ExpOneArgNot              (77)
	ExpSimp -> "(" "double" ")" ExpOneArgNot           (78)
	Literal -> IntLiteral                              (79)
	Literal -> DoubleLiteral                           (80)
	Literal -> StringLiteral                           (81)
	Literal -> FalseLiteral                            (82)
	Literal -> TrueLiteral                             (83)
	Var -> Ident                                       (84)
	Var -> Ident "[" IntLiteral "]"                    (85)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"int"          { Pos _ TInt }
	"double"       { Pos _ TDouble }
	"boolean"      { Pos _ TBoolean }
	"void"         { Pos _ TVoid }
	FalseLiteral   { Pos _ TFalseLiteral }
	TrueLiteral    { Pos _ TTrueLiteral }
	IntLiteral     { Pos _ (TIntLiteral _) }
	DoubleLiteral  { Pos _ (TDoubleLiteral _) }
	StringLiteral  { Pos _ (TStringLiteral _) }
	"("            { Pos _ TLeftParen }
	")"            { Pos _ TRightParen }
	"{"            { Pos _ TLeftBrace }
	"}"            { Pos _ TRightBrace }
	"["            { Pos _ TLeftSqBracket }
	"]"            { Pos _ TRightSqBracket }
	","            { Pos _ TComma }
	";"            { Pos _ TSemicolon }
	":"            { Pos _ TColon }
	"="            { Pos _ TAssignSign }
	"++"           { Pos _ TIncrement }
	"--"           { Pos _ TDecrement }
	"||"           { Pos _ TOr }
	"&&"           { Pos _ TAnd }
	"=="           { Pos _ TEqualsSign }
	"!="           { Pos _ TNotEqualsSign }
	"<"            { Pos _ TLessSign }
	">"            { Pos _ TGreaterSign }
	"<="           { Pos _ TLeOrEqSign }
	">="           { Pos _ TGrOrEqSign }
	"+"            { Pos _ TPlusSign }
	"-"            { Pos _ TMinusSign }
	"/"            { Pos _ TDivSign }
	"%"            { Pos _ TModSign }
	"*"            { Pos _ TMultiSign }
	"!"            { Pos _ TNot }
	"if"           { Pos _ TIf }
	"else"         { Pos _ TElse }
	"while"        { Pos _ TWhile }
	"for"          { Pos _ TFor }
	"return"       { Pos _ TReturn }
	Ident          { Pos _ (TIdent _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_javaletteParse rule  0
	Program         rule  1
	FunctionList    rules 2, 3
	Function        rule  4
	FunctionArgs    rules 5, 6, 7
	FunctionArg     rule  8
	Stmt            rules 9, 10, 11, 12, 13, 14, 15, 16
	StmtComp        rule  17
	StmtList        rules 18, 19
	StmtDecl        rule  20
	DeclList        rules 21, 22
	Decl            rules 23, 24
	StmtAssig       rule  25
	StmtIf          rules 26, 27
	StmtWhile       rule  28
	StmtFor         rule  29
	StmtReturn      rules 30, 31
	StmtExp         rule  32
	Type            rules 33, 34, 35, 36
	Exp             rules 37, 38
	ExpAssig        rule  39
	Assig           rules 40, 41, 42
	ExpOr           rules 43, 44
	ExpAnd          rules 45, 46
	ExpCompe        rules 47, 48, 49
	ExpRel          rules 50, 51, 52, 53, 54
	ExpAddi         rules 55, 56, 57
	ExpMulti        rules 58, 59, 60, 61
	ExpOneArg       rules 62, 63, 64
	ExpOneArgNot    rules 65, 66
	ExpPostfix      rules 67, 68
	ExpCallFunc     rule  69
	ExpList         rules 70, 71, 72
	ExpSimp         rules 73, 74, 75, 76, 77, 78
	Literal         rules 79, 80, 81, 82, 83
	Var             rules 84, 85

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	%eof           reduce using rule 3

	Program        goto state 9
	FunctionList   goto state 2
	Function       goto state 3
	Type           goto state 4

State 1


	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8

	FunctionList   goto state 2
	Function       goto state 3
	Type           goto state 4

State 2

	Program -> FunctionList .                           (rule 1)

	%eof           reduce using rule 1


State 3

	FunctionList -> Function . FunctionList             (rule 2)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	"{"            reduce using rule 3
	%eof           reduce using rule 3

	FunctionList   goto state 11
	Function       goto state 3
	Type           goto state 4

State 4

	Function -> Type . Ident "(" FunctionArgs ")" FunctionList "{" StmtList "}"    (rule 4)

	Ident          shift, and enter state 10


State 5

	Type -> "int" .                                     (rule 33)

	Ident          reduce using rule 33


State 6

	Type -> "double" .                                  (rule 34)

	Ident          reduce using rule 34


State 7

	Type -> "boolean" .                                 (rule 35)

	Ident          reduce using rule 35


State 8

	Type -> "void" .                                    (rule 36)

	Ident          reduce using rule 36


State 9

	%start_javaletteParse -> Program .                  (rule 0)

	%eof           accept


State 10

	Function -> Type Ident . "(" FunctionArgs ")" FunctionList "{" StmtList "}"    (rule 4)

	"("            shift, and enter state 12


State 11

	FunctionList -> Function FunctionList .             (rule 2)

	"{"            reduce using rule 2
	%eof           reduce using rule 2


State 12

	Function -> Type Ident "(" . FunctionArgs ")" FunctionList "{" StmtList "}"    (rule 4)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	")"            reduce using rule 7

	FunctionArgs   goto state 13
	FunctionArg    goto state 14
	Type           goto state 15

State 13

	Function -> Type Ident "(" FunctionArgs . ")" FunctionList "{" StmtList "}"    (rule 4)

	")"            shift, and enter state 19


State 14

	FunctionArgs -> FunctionArg .                       (rule 5)
	FunctionArgs -> FunctionArg . "," FunctionArgs      (rule 6)

	")"            reduce using rule 5
	","            shift, and enter state 18


State 15

	FunctionArg -> Type . Var                           (rule 8)

	Ident          shift, and enter state 17

	Var            goto state 16

State 16

	FunctionArg -> Type Var .                           (rule 8)

	")"            reduce using rule 8
	","            reduce using rule 8


State 17

	Var -> Ident .                                      (rule 84)
	Var -> Ident . "[" IntLiteral "]"                   (rule 85)

	")"            reduce using rule 84
	"["            shift, and enter state 22
	","            reduce using rule 84
	";"            reduce using rule 84
	"="            reduce using rule 84
	"++"           reduce using rule 84
	"--"           reduce using rule 84


State 18

	FunctionArgs -> FunctionArg "," . FunctionArgs      (rule 6)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	")"            reduce using rule 7

	FunctionArgs   goto state 21
	FunctionArg    goto state 14
	Type           goto state 15

State 19

	Function -> Type Ident "(" FunctionArgs ")" . FunctionList "{" StmtList "}"    (rule 4)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	"{"            reduce using rule 3

	FunctionList   goto state 20
	Function       goto state 3
	Type           goto state 4

State 20

	Function -> Type Ident "(" FunctionArgs ")" FunctionList . "{" StmtList "}"    (rule 4)

	"{"            shift, and enter state 24


State 21

	FunctionArgs -> FunctionArg "," FunctionArgs .      (rule 6)

	")"            reduce using rule 6


State 22

	Var -> Ident "[" . IntLiteral "]"                   (rule 85)

	IntLiteral     shift, and enter state 23


State 23

	Var -> Ident "[" IntLiteral . "]"                   (rule 85)

	"]"            shift, and enter state 67


State 24

	Function -> Type Ident "(" FunctionArgs ")" FunctionList "{" . StmtList "}"    (rule 4)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"}"            reduce using rule 19
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 25
	StmtComp       goto state 26
	StmtList       goto state 27
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 25

	StmtList -> Stmt . StmtList                         (rule 18)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"}"            reduce using rule 19
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 25
	StmtComp       goto state 26
	StmtList       goto state 106
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 26

	Stmt -> StmtComp .                                  (rule 9)

	"int"          reduce using rule 9
	"double"       reduce using rule 9
	"boolean"      reduce using rule 9
	"void"         reduce using rule 9
	FalseLiteral   reduce using rule 9
	TrueLiteral    reduce using rule 9
	IntLiteral     reduce using rule 9
	DoubleLiteral  reduce using rule 9
	StringLiteral  reduce using rule 9
	"("            reduce using rule 9
	"{"            reduce using rule 9
	"}"            reduce using rule 9
	"+"            reduce using rule 9
	"-"            reduce using rule 9
	"!"            reduce using rule 9
	"if"           reduce using rule 9
	"else"         reduce using rule 9
	"while"        reduce using rule 9
	"for"          reduce using rule 9
	"return"       reduce using rule 9
	Ident          reduce using rule 9


State 27

	Function -> Type Ident "(" FunctionArgs ")" FunctionList "{" StmtList . "}"    (rule 4)

	"}"            shift, and enter state 105


State 28

	Stmt -> StmtDecl .                                  (rule 10)

	"int"          reduce using rule 10
	"double"       reduce using rule 10
	"boolean"      reduce using rule 10
	"void"         reduce using rule 10
	FalseLiteral   reduce using rule 10
	TrueLiteral    reduce using rule 10
	IntLiteral     reduce using rule 10
	DoubleLiteral  reduce using rule 10
	StringLiteral  reduce using rule 10
	"("            reduce using rule 10
	"{"            reduce using rule 10
	"}"            reduce using rule 10
	"+"            reduce using rule 10
	"-"            reduce using rule 10
	"!"            reduce using rule 10
	"if"           reduce using rule 10
	"else"         reduce using rule 10
	"while"        reduce using rule 10
	"for"          reduce using rule 10
	"return"       reduce using rule 10
	Ident          reduce using rule 10


State 29

	Stmt -> StmtAssig .                                 (rule 11)

	"int"          reduce using rule 11
	"double"       reduce using rule 11
	"boolean"      reduce using rule 11
	"void"         reduce using rule 11
	FalseLiteral   reduce using rule 11
	TrueLiteral    reduce using rule 11
	IntLiteral     reduce using rule 11
	DoubleLiteral  reduce using rule 11
	StringLiteral  reduce using rule 11
	"("            reduce using rule 11
	"{"            reduce using rule 11
	"}"            reduce using rule 11
	"+"            reduce using rule 11
	"-"            reduce using rule 11
	"!"            reduce using rule 11
	"if"           reduce using rule 11
	"else"         reduce using rule 11
	"while"        reduce using rule 11
	"for"          reduce using rule 11
	"return"       reduce using rule 11
	Ident          reduce using rule 11


State 30

	Stmt -> StmtIf .                                    (rule 12)

	"int"          reduce using rule 12
	"double"       reduce using rule 12
	"boolean"      reduce using rule 12
	"void"         reduce using rule 12
	FalseLiteral   reduce using rule 12
	TrueLiteral    reduce using rule 12
	IntLiteral     reduce using rule 12
	DoubleLiteral  reduce using rule 12
	StringLiteral  reduce using rule 12
	"("            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	"+"            reduce using rule 12
	"-"            reduce using rule 12
	"!"            reduce using rule 12
	"if"           reduce using rule 12
	"else"         reduce using rule 12
	"while"        reduce using rule 12
	"for"          reduce using rule 12
	"return"       reduce using rule 12
	Ident          reduce using rule 12


State 31

	Stmt -> StmtWhile .                                 (rule 13)

	"int"          reduce using rule 13
	"double"       reduce using rule 13
	"boolean"      reduce using rule 13
	"void"         reduce using rule 13
	FalseLiteral   reduce using rule 13
	TrueLiteral    reduce using rule 13
	IntLiteral     reduce using rule 13
	DoubleLiteral  reduce using rule 13
	StringLiteral  reduce using rule 13
	"("            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	"+"            reduce using rule 13
	"-"            reduce using rule 13
	"!"            reduce using rule 13
	"if"           reduce using rule 13
	"else"         reduce using rule 13
	"while"        reduce using rule 13
	"for"          reduce using rule 13
	"return"       reduce using rule 13
	Ident          reduce using rule 13


State 32

	Stmt -> StmtFor .                                   (rule 14)

	"int"          reduce using rule 14
	"double"       reduce using rule 14
	"boolean"      reduce using rule 14
	"void"         reduce using rule 14
	FalseLiteral   reduce using rule 14
	TrueLiteral    reduce using rule 14
	IntLiteral     reduce using rule 14
	DoubleLiteral  reduce using rule 14
	StringLiteral  reduce using rule 14
	"("            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	"+"            reduce using rule 14
	"-"            reduce using rule 14
	"!"            reduce using rule 14
	"if"           reduce using rule 14
	"else"         reduce using rule 14
	"while"        reduce using rule 14
	"for"          reduce using rule 14
	"return"       reduce using rule 14
	Ident          reduce using rule 14


State 33

	Stmt -> StmtReturn .                                (rule 15)

	"int"          reduce using rule 15
	"double"       reduce using rule 15
	"boolean"      reduce using rule 15
	"void"         reduce using rule 15
	FalseLiteral   reduce using rule 15
	TrueLiteral    reduce using rule 15
	IntLiteral     reduce using rule 15
	DoubleLiteral  reduce using rule 15
	StringLiteral  reduce using rule 15
	"("            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	"+"            reduce using rule 15
	"-"            reduce using rule 15
	"!"            reduce using rule 15
	"if"           reduce using rule 15
	"else"         reduce using rule 15
	"while"        reduce using rule 15
	"for"          reduce using rule 15
	"return"       reduce using rule 15
	Ident          reduce using rule 15


State 34

	Stmt -> StmtExp .                                   (rule 16)

	"int"          reduce using rule 16
	"double"       reduce using rule 16
	"boolean"      reduce using rule 16
	"void"         reduce using rule 16
	FalseLiteral   reduce using rule 16
	TrueLiteral    reduce using rule 16
	IntLiteral     reduce using rule 16
	DoubleLiteral  reduce using rule 16
	StringLiteral  reduce using rule 16
	"("            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	"+"            reduce using rule 16
	"-"            reduce using rule 16
	"!"            reduce using rule 16
	"if"           reduce using rule 16
	"else"         reduce using rule 16
	"while"        reduce using rule 16
	"for"          reduce using rule 16
	"return"       reduce using rule 16
	Ident          reduce using rule 16


State 35

	StmtDecl -> Type . DeclList ";"                     (rule 20)

	Ident          shift, and enter state 17

	DeclList       goto state 102
	Decl           goto state 103
	Var            goto state 104

State 36

	StmtExp -> Exp . ";"                                (rule 32)

	";"            shift, and enter state 101


State 37

	StmtAssig -> ExpAssig . ";"                         (rule 25)
	Exp -> ExpAssig .                                   (rule 38)

	";"            shift, and enter state 100
			(reduce using rule 38)



State 38

	ExpAssig -> Assig .                                 (rule 39)

	")"            reduce using rule 39
	","            reduce using rule 39
	";"            reduce using rule 39


State 39

	Exp -> ExpOr .                                      (rule 37)
	ExpOr -> ExpOr . "||" ExpAnd                        (rule 44)

	")"            reduce using rule 37
	","            reduce using rule 37
	";"            reduce using rule 37
	"||"           shift, and enter state 99


State 40

	ExpOr -> ExpAnd .                                   (rule 43)
	ExpAnd -> ExpAnd . "&&" ExpCompe                    (rule 46)

	")"            reduce using rule 43
	","            reduce using rule 43
	";"            reduce using rule 43
	"||"           reduce using rule 43
	"&&"           shift, and enter state 98


State 41

	ExpAnd -> ExpCompe .                                (rule 45)
	ExpCompe -> ExpCompe . "==" ExpRel                  (rule 48)
	ExpCompe -> ExpCompe . "!=" ExpRel                  (rule 49)

	")"            reduce using rule 45
	","            reduce using rule 45
	";"            reduce using rule 45
	"||"           reduce using rule 45
	"&&"           reduce using rule 45
	"=="           shift, and enter state 96
	"!="           shift, and enter state 97


State 42

	ExpCompe -> ExpRel .                                (rule 47)
	ExpRel -> ExpRel . "<" ExpAddi                      (rule 51)
	ExpRel -> ExpRel . ">" ExpAddi                      (rule 52)
	ExpRel -> ExpRel . "<=" ExpAddi                     (rule 53)
	ExpRel -> ExpRel . ">=" ExpAddi                     (rule 54)

	")"            reduce using rule 47
	","            reduce using rule 47
	";"            reduce using rule 47
	"||"           reduce using rule 47
	"&&"           reduce using rule 47
	"=="           reduce using rule 47
	"!="           reduce using rule 47
	"<"            shift, and enter state 92
	">"            shift, and enter state 93
	"<="           shift, and enter state 94
	">="           shift, and enter state 95


State 43

	ExpRel -> ExpAddi .                                 (rule 50)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 50
	","            reduce using rule 50
	";"            reduce using rule 50
	"||"           reduce using rule 50
	"&&"           reduce using rule 50
	"=="           reduce using rule 50
	"!="           reduce using rule 50
	"<"            reduce using rule 50
	">"            reduce using rule 50
	"<="           reduce using rule 50
	">="           reduce using rule 50
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 44

	ExpAddi -> ExpMulti .                               (rule 55)
	ExpMulti -> ExpMulti . "*" ExpOneArg                (rule 59)
	ExpMulti -> ExpMulti . "/" ExpOneArg                (rule 60)
	ExpMulti -> ExpMulti . "%" ExpOneArg                (rule 61)

	")"            reduce using rule 55
	","            reduce using rule 55
	";"            reduce using rule 55
	"||"           reduce using rule 55
	"&&"           reduce using rule 55
	"=="           reduce using rule 55
	"!="           reduce using rule 55
	"<"            reduce using rule 55
	">"            reduce using rule 55
	"<="           reduce using rule 55
	">="           reduce using rule 55
	"+"            reduce using rule 55
	"-"            reduce using rule 55
	"/"            shift, and enter state 87
	"%"            shift, and enter state 88
	"*"            shift, and enter state 89


State 45

	ExpMulti -> ExpOneArg .                             (rule 58)

	")"            reduce using rule 58
	","            reduce using rule 58
	";"            reduce using rule 58
	"||"           reduce using rule 58
	"&&"           reduce using rule 58
	"=="           reduce using rule 58
	"!="           reduce using rule 58
	"<"            reduce using rule 58
	">"            reduce using rule 58
	"<="           reduce using rule 58
	">="           reduce using rule 58
	"+"            reduce using rule 58
	"-"            reduce using rule 58
	"/"            reduce using rule 58
	"%"            reduce using rule 58
	"*"            reduce using rule 58


State 46

	ExpOneArg -> ExpOneArgNot .                         (rule 62)

	")"            reduce using rule 62
	","            reduce using rule 62
	";"            reduce using rule 62
	"||"           reduce using rule 62
	"&&"           reduce using rule 62
	"=="           reduce using rule 62
	"!="           reduce using rule 62
	"<"            reduce using rule 62
	">"            reduce using rule 62
	"<="           reduce using rule 62
	">="           reduce using rule 62
	"+"            reduce using rule 62
	"-"            reduce using rule 62
	"/"            reduce using rule 62
	"%"            reduce using rule 62
	"*"            reduce using rule 62


State 47

	ExpOneArgNot -> ExpPostfix .                        (rule 65)

	")"            reduce using rule 65
	","            reduce using rule 65
	";"            reduce using rule 65
	"||"           reduce using rule 65
	"&&"           reduce using rule 65
	"=="           reduce using rule 65
	"!="           reduce using rule 65
	"<"            reduce using rule 65
	">"            reduce using rule 65
	"<="           reduce using rule 65
	">="           reduce using rule 65
	"+"            reduce using rule 65
	"-"            reduce using rule 65
	"/"            reduce using rule 65
	"%"            reduce using rule 65
	"*"            reduce using rule 65


State 48

	ExpPostfix -> ExpCallFunc .                         (rule 68)

	")"            reduce using rule 68
	","            reduce using rule 68
	";"            reduce using rule 68
	"||"           reduce using rule 68
	"&&"           reduce using rule 68
	"=="           reduce using rule 68
	"!="           reduce using rule 68
	"<"            reduce using rule 68
	">"            reduce using rule 68
	"<="           reduce using rule 68
	">="           reduce using rule 68
	"+"            reduce using rule 68
	"-"            reduce using rule 68
	"/"            reduce using rule 68
	"%"            reduce using rule 68
	"*"            reduce using rule 68


State 49

	ExpPostfix -> ExpSimp .                             (rule 67)

	")"            reduce using rule 67
	","            reduce using rule 67
	";"            reduce using rule 67
	"||"           reduce using rule 67
	"&&"           reduce using rule 67
	"=="           reduce using rule 67
	"!="           reduce using rule 67
	"<"            reduce using rule 67
	">"            reduce using rule 67
	"<="           reduce using rule 67
	">="           reduce using rule 67
	"+"            reduce using rule 67
	"-"            reduce using rule 67
	"/"            reduce using rule 67
	"%"            reduce using rule 67
	"*"            reduce using rule 67


State 50

	ExpSimp -> Literal .                                (rule 74)

	")"            reduce using rule 74
	","            reduce using rule 74
	";"            reduce using rule 74
	"||"           reduce using rule 74
	"&&"           reduce using rule 74
	"=="           reduce using rule 74
	"!="           reduce using rule 74
	"<"            reduce using rule 74
	">"            reduce using rule 74
	"<="           reduce using rule 74
	">="           reduce using rule 74
	"+"            reduce using rule 74
	"-"            reduce using rule 74
	"/"            reduce using rule 74
	"%"            reduce using rule 74
	"*"            reduce using rule 74


State 51

	Assig -> Var . "=" ExpAddi                          (rule 40)
	Assig -> Var . "++"                                 (rule 41)
	Assig -> Var . "--"                                 (rule 42)
	ExpSimp -> Var .                                    (rule 73)

	")"            reduce using rule 73
	","            reduce using rule 73
	";"            reduce using rule 73
	"="            shift, and enter state 84
	"++"           shift, and enter state 85
	"--"           shift, and enter state 86
	"||"           reduce using rule 73
	"&&"           reduce using rule 73
	"=="           reduce using rule 73
	"!="           reduce using rule 73
	"<"            reduce using rule 73
	">"            reduce using rule 73
	"<="           reduce using rule 73
	">="           reduce using rule 73
	"+"            reduce using rule 73
	"-"            reduce using rule 73
	"/"            reduce using rule 73
	"%"            reduce using rule 73
	"*"            reduce using rule 73


State 52

	Literal -> FalseLiteral .                           (rule 82)

	")"            reduce using rule 82
	","            reduce using rule 82
	";"            reduce using rule 82
	"||"           reduce using rule 82
	"&&"           reduce using rule 82
	"=="           reduce using rule 82
	"!="           reduce using rule 82
	"<"            reduce using rule 82
	">"            reduce using rule 82
	"<="           reduce using rule 82
	">="           reduce using rule 82
	"+"            reduce using rule 82
	"-"            reduce using rule 82
	"/"            reduce using rule 82
	"%"            reduce using rule 82
	"*"            reduce using rule 82


State 53

	Literal -> TrueLiteral .                            (rule 83)

	")"            reduce using rule 83
	","            reduce using rule 83
	";"            reduce using rule 83
	"||"           reduce using rule 83
	"&&"           reduce using rule 83
	"=="           reduce using rule 83
	"!="           reduce using rule 83
	"<"            reduce using rule 83
	">"            reduce using rule 83
	"<="           reduce using rule 83
	">="           reduce using rule 83
	"+"            reduce using rule 83
	"-"            reduce using rule 83
	"/"            reduce using rule 83
	"%"            reduce using rule 83
	"*"            reduce using rule 83


State 54

	Literal -> IntLiteral .                             (rule 79)

	")"            reduce using rule 79
	","            reduce using rule 79
	";"            reduce using rule 79
	"||"           reduce using rule 79
	"&&"           reduce using rule 79
	"=="           reduce using rule 79
	"!="           reduce using rule 79
	"<"            reduce using rule 79
	">"            reduce using rule 79
	"<="           reduce using rule 79
	">="           reduce using rule 79
	"+"            reduce using rule 79
	"-"            reduce using rule 79
	"/"            reduce using rule 79
	"%"            reduce using rule 79
	"*"            reduce using rule 79


State 55

	Literal -> DoubleLiteral .                          (rule 80)

	")"            reduce using rule 80
	","            reduce using rule 80
	";"            reduce using rule 80
	"||"           reduce using rule 80
	"&&"           reduce using rule 80
	"=="           reduce using rule 80
	"!="           reduce using rule 80
	"<"            reduce using rule 80
	">"            reduce using rule 80
	"<="           reduce using rule 80
	">="           reduce using rule 80
	"+"            reduce using rule 80
	"-"            reduce using rule 80
	"/"            reduce using rule 80
	"%"            reduce using rule 80
	"*"            reduce using rule 80


State 56

	Literal -> StringLiteral .                          (rule 81)

	")"            reduce using rule 81
	","            reduce using rule 81
	";"            reduce using rule 81
	"||"           reduce using rule 81
	"&&"           reduce using rule 81
	"=="           reduce using rule 81
	"!="           reduce using rule 81
	"<"            reduce using rule 81
	">"            reduce using rule 81
	"<="           reduce using rule 81
	">="           reduce using rule 81
	"+"            reduce using rule 81
	"-"            reduce using rule 81
	"/"            reduce using rule 81
	"%"            reduce using rule 81
	"*"            reduce using rule 81


State 57

	ExpSimp -> "(" . Exp ")"                            (rule 75)
	ExpSimp -> "(" . "boolean" ")" ExpOneArgNot         (rule 76)
	ExpSimp -> "(" . "int" ")" ExpOneArgNot             (rule 77)
	ExpSimp -> "(" . "double" ")" ExpOneArgNot          (rule 78)

	"int"          shift, and enter state 81
	"double"       shift, and enter state 82
	"boolean"      shift, and enter state 83
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 80
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 58

	StmtComp -> "{" . StmtList "}"                      (rule 17)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"}"            reduce using rule 19
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 25
	StmtComp       goto state 26
	StmtList       goto state 79
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 59

	ExpOneArg -> "+" . ExpOneArg                        (rule 63)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArg      goto state 78
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 60

	ExpOneArg -> "-" . ExpOneArg                        (rule 64)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArg      goto state 77
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 61

	ExpOneArgNot -> "!" . ExpPostfix                    (rule 66)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	Ident          shift, and enter state 66

	ExpPostfix     goto state 75
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 62

	StmtIf -> "if" . "(" Exp ")" Stmt                   (rule 26)
	StmtIf -> "if" . "(" Exp ")" Stmt "else" Stmt       (rule 27)

	"("            shift, and enter state 74


State 63

	StmtWhile -> "while" . "(" Exp ")" Stmt             (rule 28)

	"("            shift, and enter state 73


State 64

	StmtFor -> "for" . "(" Assig ";" Exp ";" Assig ")" Stmt    (rule 29)

	"("            shift, and enter state 72


State 65

	StmtReturn -> "return" . ";"                        (rule 30)
	StmtReturn -> "return" . Exp ";"                    (rule 31)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	";"            shift, and enter state 71
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 69
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 66

	ExpCallFunc -> Ident . "(" ExpList ")"              (rule 69)
	Var -> Ident .                                      (rule 84)
	Var -> Ident . "[" IntLiteral "]"                   (rule 85)

	"("            shift, and enter state 68
	")"            reduce using rule 84
	"["            shift, and enter state 22
	","            reduce using rule 84
	";"            reduce using rule 84
	"="            reduce using rule 84
	"++"           reduce using rule 84
	"--"           reduce using rule 84
	"||"           reduce using rule 84
	"&&"           reduce using rule 84
	"=="           reduce using rule 84
	"!="           reduce using rule 84
	"<"            reduce using rule 84
	">"            reduce using rule 84
	"<="           reduce using rule 84
	">="           reduce using rule 84
	"+"            reduce using rule 84
	"-"            reduce using rule 84
	"/"            reduce using rule 84
	"%"            reduce using rule 84
	"*"            reduce using rule 84


State 67

	Var -> Ident "[" IntLiteral "]" .                   (rule 85)

	")"            reduce using rule 85
	","            reduce using rule 85
	";"            reduce using rule 85
	"="            reduce using rule 85
	"++"           reduce using rule 85
	"--"           reduce using rule 85
	"||"           reduce using rule 85
	"&&"           reduce using rule 85
	"=="           reduce using rule 85
	"!="           reduce using rule 85
	"<"            reduce using rule 85
	">"            reduce using rule 85
	"<="           reduce using rule 85
	">="           reduce using rule 85
	"+"            reduce using rule 85
	"-"            reduce using rule 85
	"/"            reduce using rule 85
	"%"            reduce using rule 85
	"*"            reduce using rule 85


State 68

	ExpCallFunc -> Ident "(" . ExpList ")"              (rule 69)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	")"            reduce using rule 72
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 134
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpList        goto state 135
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 69

	StmtReturn -> "return" Exp . ";"                    (rule 31)

	";"            shift, and enter state 133


State 70

	Exp -> ExpAssig .                                   (rule 38)

	")"            reduce using rule 38
	","            reduce using rule 38
	";"            reduce using rule 38


State 71

	StmtReturn -> "return" ";" .                        (rule 30)

	"int"          reduce using rule 30
	"double"       reduce using rule 30
	"boolean"      reduce using rule 30
	"void"         reduce using rule 30
	FalseLiteral   reduce using rule 30
	TrueLiteral    reduce using rule 30
	IntLiteral     reduce using rule 30
	DoubleLiteral  reduce using rule 30
	StringLiteral  reduce using rule 30
	"("            reduce using rule 30
	"{"            reduce using rule 30
	"}"            reduce using rule 30
	"+"            reduce using rule 30
	"-"            reduce using rule 30
	"!"            reduce using rule 30
	"if"           reduce using rule 30
	"else"         reduce using rule 30
	"while"        reduce using rule 30
	"for"          reduce using rule 30
	"return"       reduce using rule 30
	Ident          reduce using rule 30


State 72

	StmtFor -> "for" "(" . Assig ";" Exp ";" Assig ")" Stmt    (rule 29)

	Ident          shift, and enter state 17

	Assig          goto state 131
	Var            goto state 132

State 73

	StmtWhile -> "while" "(" . Exp ")" Stmt             (rule 28)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 130
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 74

	StmtIf -> "if" "(" . Exp ")" Stmt                   (rule 26)
	StmtIf -> "if" "(" . Exp ")" Stmt "else" Stmt       (rule 27)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 129
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 75

	ExpOneArgNot -> "!" ExpPostfix .                    (rule 66)

	")"            reduce using rule 66
	","            reduce using rule 66
	";"            reduce using rule 66
	"||"           reduce using rule 66
	"&&"           reduce using rule 66
	"=="           reduce using rule 66
	"!="           reduce using rule 66
	"<"            reduce using rule 66
	">"            reduce using rule 66
	"<="           reduce using rule 66
	">="           reduce using rule 66
	"+"            reduce using rule 66
	"-"            reduce using rule 66
	"/"            reduce using rule 66
	"%"            reduce using rule 66
	"*"            reduce using rule 66


State 76

	ExpSimp -> Var .                                    (rule 73)

	")"            reduce using rule 73
	","            reduce using rule 73
	";"            reduce using rule 73
	"||"           reduce using rule 73
	"&&"           reduce using rule 73
	"=="           reduce using rule 73
	"!="           reduce using rule 73
	"<"            reduce using rule 73
	">"            reduce using rule 73
	"<="           reduce using rule 73
	">="           reduce using rule 73
	"+"            reduce using rule 73
	"-"            reduce using rule 73
	"/"            reduce using rule 73
	"%"            reduce using rule 73
	"*"            reduce using rule 73


State 77

	ExpOneArg -> "-" ExpOneArg .                        (rule 64)

	")"            reduce using rule 64
	","            reduce using rule 64
	";"            reduce using rule 64
	"||"           reduce using rule 64
	"&&"           reduce using rule 64
	"=="           reduce using rule 64
	"!="           reduce using rule 64
	"<"            reduce using rule 64
	">"            reduce using rule 64
	"<="           reduce using rule 64
	">="           reduce using rule 64
	"+"            reduce using rule 64
	"-"            reduce using rule 64
	"/"            reduce using rule 64
	"%"            reduce using rule 64
	"*"            reduce using rule 64


State 78

	ExpOneArg -> "+" ExpOneArg .                        (rule 63)

	")"            reduce using rule 63
	","            reduce using rule 63
	";"            reduce using rule 63
	"||"           reduce using rule 63
	"&&"           reduce using rule 63
	"=="           reduce using rule 63
	"!="           reduce using rule 63
	"<"            reduce using rule 63
	">"            reduce using rule 63
	"<="           reduce using rule 63
	">="           reduce using rule 63
	"+"            reduce using rule 63
	"-"            reduce using rule 63
	"/"            reduce using rule 63
	"%"            reduce using rule 63
	"*"            reduce using rule 63


State 79

	StmtComp -> "{" StmtList . "}"                      (rule 17)

	"}"            shift, and enter state 128


State 80

	ExpSimp -> "(" Exp . ")"                            (rule 75)

	")"            shift, and enter state 127


State 81

	ExpSimp -> "(" "int" . ")" ExpOneArgNot             (rule 77)

	")"            shift, and enter state 126


State 82

	ExpSimp -> "(" "double" . ")" ExpOneArgNot          (rule 78)

	")"            shift, and enter state 125


State 83

	ExpSimp -> "(" "boolean" . ")" ExpOneArgNot         (rule 76)

	")"            shift, and enter state 124


State 84

	Assig -> Var "=" . ExpAddi                          (rule 40)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAddi        goto state 123
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 85

	Assig -> Var "++" .                                 (rule 41)

	")"            reduce using rule 41
	","            reduce using rule 41
	";"            reduce using rule 41


State 86

	Assig -> Var "--" .                                 (rule 42)

	")"            reduce using rule 42
	","            reduce using rule 42
	";"            reduce using rule 42


State 87

	ExpMulti -> ExpMulti "/" . ExpOneArg                (rule 60)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArg      goto state 122
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 88

	ExpMulti -> ExpMulti "%" . ExpOneArg                (rule 61)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArg      goto state 121
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 89

	ExpMulti -> ExpMulti "*" . ExpOneArg                (rule 59)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArg      goto state 120
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 90

	ExpAddi -> ExpAddi "+" . ExpMulti                   (rule 56)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpMulti       goto state 119
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 91

	ExpAddi -> ExpAddi "-" . ExpMulti                   (rule 57)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpMulti       goto state 118
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 92

	ExpRel -> ExpRel "<" . ExpAddi                      (rule 51)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAddi        goto state 117
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 93

	ExpRel -> ExpRel ">" . ExpAddi                      (rule 52)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAddi        goto state 116
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 94

	ExpRel -> ExpRel "<=" . ExpAddi                     (rule 53)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAddi        goto state 115
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 95

	ExpRel -> ExpRel ">=" . ExpAddi                     (rule 54)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAddi        goto state 114
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 96

	ExpCompe -> ExpCompe "==" . ExpRel                  (rule 48)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpRel         goto state 113
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 97

	ExpCompe -> ExpCompe "!=" . ExpRel                  (rule 49)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpRel         goto state 112
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 98

	ExpAnd -> ExpAnd "&&" . ExpCompe                    (rule 46)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpCompe       goto state 111
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 99

	ExpOr -> ExpOr "||" . ExpAnd                        (rule 44)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpAnd         goto state 110
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 100

	StmtAssig -> ExpAssig ";" .                         (rule 25)

	"int"          reduce using rule 25
	"double"       reduce using rule 25
	"boolean"      reduce using rule 25
	"void"         reduce using rule 25
	FalseLiteral   reduce using rule 25
	TrueLiteral    reduce using rule 25
	IntLiteral     reduce using rule 25
	DoubleLiteral  reduce using rule 25
	StringLiteral  reduce using rule 25
	"("            reduce using rule 25
	"{"            reduce using rule 25
	"}"            reduce using rule 25
	"+"            reduce using rule 25
	"-"            reduce using rule 25
	"!"            reduce using rule 25
	"if"           reduce using rule 25
	"else"         reduce using rule 25
	"while"        reduce using rule 25
	"for"          reduce using rule 25
	"return"       reduce using rule 25
	Ident          reduce using rule 25


State 101

	StmtExp -> Exp ";" .                                (rule 32)

	"int"          reduce using rule 32
	"double"       reduce using rule 32
	"boolean"      reduce using rule 32
	"void"         reduce using rule 32
	FalseLiteral   reduce using rule 32
	TrueLiteral    reduce using rule 32
	IntLiteral     reduce using rule 32
	DoubleLiteral  reduce using rule 32
	StringLiteral  reduce using rule 32
	"("            reduce using rule 32
	"{"            reduce using rule 32
	"}"            reduce using rule 32
	"+"            reduce using rule 32
	"-"            reduce using rule 32
	"!"            reduce using rule 32
	"if"           reduce using rule 32
	"else"         reduce using rule 32
	"while"        reduce using rule 32
	"for"          reduce using rule 32
	"return"       reduce using rule 32
	Ident          reduce using rule 32


State 102

	StmtDecl -> Type DeclList . ";"                     (rule 20)

	";"            shift, and enter state 109


State 103

	DeclList -> Decl .                                  (rule 21)
	DeclList -> Decl . "," DeclList                     (rule 22)

	","            shift, and enter state 108
	";"            reduce using rule 21


State 104

	Decl -> Var .                                       (rule 23)
	Decl -> Var . "=" Exp                               (rule 24)

	","            reduce using rule 23
	";"            reduce using rule 23
	"="            shift, and enter state 107


State 105

	Function -> Type Ident "(" FunctionArgs ")" FunctionList "{" StmtList "}" .    (rule 4)

	"int"          reduce using rule 4
	"double"       reduce using rule 4
	"boolean"      reduce using rule 4
	"void"         reduce using rule 4
	"{"            reduce using rule 4
	%eof           reduce using rule 4


State 106

	StmtList -> Stmt StmtList .                         (rule 18)

	"}"            reduce using rule 18


State 107

	Decl -> Var "=" . Exp                               (rule 24)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 145
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 108

	DeclList -> Decl "," . DeclList                     (rule 22)

	Ident          shift, and enter state 17

	DeclList       goto state 144
	Decl           goto state 103
	Var            goto state 104

State 109

	StmtDecl -> Type DeclList ";" .                     (rule 20)

	"int"          reduce using rule 20
	"double"       reduce using rule 20
	"boolean"      reduce using rule 20
	"void"         reduce using rule 20
	FalseLiteral   reduce using rule 20
	TrueLiteral    reduce using rule 20
	IntLiteral     reduce using rule 20
	DoubleLiteral  reduce using rule 20
	StringLiteral  reduce using rule 20
	"("            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"!"            reduce using rule 20
	"if"           reduce using rule 20
	"else"         reduce using rule 20
	"while"        reduce using rule 20
	"for"          reduce using rule 20
	"return"       reduce using rule 20
	Ident          reduce using rule 20


State 110

	ExpOr -> ExpOr "||" ExpAnd .                        (rule 44)
	ExpAnd -> ExpAnd . "&&" ExpCompe                    (rule 46)

	")"            reduce using rule 44
	","            reduce using rule 44
	";"            reduce using rule 44
	"||"           reduce using rule 44
	"&&"           shift, and enter state 98


State 111

	ExpAnd -> ExpAnd "&&" ExpCompe .                    (rule 46)
	ExpCompe -> ExpCompe . "==" ExpRel                  (rule 48)
	ExpCompe -> ExpCompe . "!=" ExpRel                  (rule 49)

	")"            reduce using rule 46
	","            reduce using rule 46
	";"            reduce using rule 46
	"||"           reduce using rule 46
	"&&"           reduce using rule 46
	"=="           shift, and enter state 96
	"!="           shift, and enter state 97


State 112

	ExpCompe -> ExpCompe "!=" ExpRel .                  (rule 49)
	ExpRel -> ExpRel . "<" ExpAddi                      (rule 51)
	ExpRel -> ExpRel . ">" ExpAddi                      (rule 52)
	ExpRel -> ExpRel . "<=" ExpAddi                     (rule 53)
	ExpRel -> ExpRel . ">=" ExpAddi                     (rule 54)

	")"            reduce using rule 49
	","            reduce using rule 49
	";"            reduce using rule 49
	"||"           reduce using rule 49
	"&&"           reduce using rule 49
	"=="           reduce using rule 49
	"!="           reduce using rule 49
	"<"            shift, and enter state 92
	">"            shift, and enter state 93
	"<="           shift, and enter state 94
	">="           shift, and enter state 95


State 113

	ExpCompe -> ExpCompe "==" ExpRel .                  (rule 48)
	ExpRel -> ExpRel . "<" ExpAddi                      (rule 51)
	ExpRel -> ExpRel . ">" ExpAddi                      (rule 52)
	ExpRel -> ExpRel . "<=" ExpAddi                     (rule 53)
	ExpRel -> ExpRel . ">=" ExpAddi                     (rule 54)

	")"            reduce using rule 48
	","            reduce using rule 48
	";"            reduce using rule 48
	"||"           reduce using rule 48
	"&&"           reduce using rule 48
	"=="           reduce using rule 48
	"!="           reduce using rule 48
	"<"            shift, and enter state 92
	">"            shift, and enter state 93
	"<="           shift, and enter state 94
	">="           shift, and enter state 95


State 114

	ExpRel -> ExpRel ">=" ExpAddi .                     (rule 54)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 54
	","            reduce using rule 54
	";"            reduce using rule 54
	"||"           reduce using rule 54
	"&&"           reduce using rule 54
	"=="           reduce using rule 54
	"!="           reduce using rule 54
	"<"            reduce using rule 54
	">"            reduce using rule 54
	"<="           reduce using rule 54
	">="           reduce using rule 54
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 115

	ExpRel -> ExpRel "<=" ExpAddi .                     (rule 53)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 53
	","            reduce using rule 53
	";"            reduce using rule 53
	"||"           reduce using rule 53
	"&&"           reduce using rule 53
	"=="           reduce using rule 53
	"!="           reduce using rule 53
	"<"            reduce using rule 53
	">"            reduce using rule 53
	"<="           reduce using rule 53
	">="           reduce using rule 53
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 116

	ExpRel -> ExpRel ">" ExpAddi .                      (rule 52)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 52
	","            reduce using rule 52
	";"            reduce using rule 52
	"||"           reduce using rule 52
	"&&"           reduce using rule 52
	"=="           reduce using rule 52
	"!="           reduce using rule 52
	"<"            reduce using rule 52
	">"            reduce using rule 52
	"<="           reduce using rule 52
	">="           reduce using rule 52
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 117

	ExpRel -> ExpRel "<" ExpAddi .                      (rule 51)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 51
	","            reduce using rule 51
	";"            reduce using rule 51
	"||"           reduce using rule 51
	"&&"           reduce using rule 51
	"=="           reduce using rule 51
	"!="           reduce using rule 51
	"<"            reduce using rule 51
	">"            reduce using rule 51
	"<="           reduce using rule 51
	">="           reduce using rule 51
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 118

	ExpAddi -> ExpAddi "-" ExpMulti .                   (rule 57)
	ExpMulti -> ExpMulti . "*" ExpOneArg                (rule 59)
	ExpMulti -> ExpMulti . "/" ExpOneArg                (rule 60)
	ExpMulti -> ExpMulti . "%" ExpOneArg                (rule 61)

	")"            reduce using rule 57
	","            reduce using rule 57
	";"            reduce using rule 57
	"||"           reduce using rule 57
	"&&"           reduce using rule 57
	"=="           reduce using rule 57
	"!="           reduce using rule 57
	"<"            reduce using rule 57
	">"            reduce using rule 57
	"<="           reduce using rule 57
	">="           reduce using rule 57
	"+"            reduce using rule 57
	"-"            reduce using rule 57
	"/"            shift, and enter state 87
	"%"            shift, and enter state 88
	"*"            shift, and enter state 89


State 119

	ExpAddi -> ExpAddi "+" ExpMulti .                   (rule 56)
	ExpMulti -> ExpMulti . "*" ExpOneArg                (rule 59)
	ExpMulti -> ExpMulti . "/" ExpOneArg                (rule 60)
	ExpMulti -> ExpMulti . "%" ExpOneArg                (rule 61)

	")"            reduce using rule 56
	","            reduce using rule 56
	";"            reduce using rule 56
	"||"           reduce using rule 56
	"&&"           reduce using rule 56
	"=="           reduce using rule 56
	"!="           reduce using rule 56
	"<"            reduce using rule 56
	">"            reduce using rule 56
	"<="           reduce using rule 56
	">="           reduce using rule 56
	"+"            reduce using rule 56
	"-"            reduce using rule 56
	"/"            shift, and enter state 87
	"%"            shift, and enter state 88
	"*"            shift, and enter state 89


State 120

	ExpMulti -> ExpMulti "*" ExpOneArg .                (rule 59)

	")"            reduce using rule 59
	","            reduce using rule 59
	";"            reduce using rule 59
	"||"           reduce using rule 59
	"&&"           reduce using rule 59
	"=="           reduce using rule 59
	"!="           reduce using rule 59
	"<"            reduce using rule 59
	">"            reduce using rule 59
	"<="           reduce using rule 59
	">="           reduce using rule 59
	"+"            reduce using rule 59
	"-"            reduce using rule 59
	"/"            reduce using rule 59
	"%"            reduce using rule 59
	"*"            reduce using rule 59


State 121

	ExpMulti -> ExpMulti "%" ExpOneArg .                (rule 61)

	")"            reduce using rule 61
	","            reduce using rule 61
	";"            reduce using rule 61
	"||"           reduce using rule 61
	"&&"           reduce using rule 61
	"=="           reduce using rule 61
	"!="           reduce using rule 61
	"<"            reduce using rule 61
	">"            reduce using rule 61
	"<="           reduce using rule 61
	">="           reduce using rule 61
	"+"            reduce using rule 61
	"-"            reduce using rule 61
	"/"            reduce using rule 61
	"%"            reduce using rule 61
	"*"            reduce using rule 61


State 122

	ExpMulti -> ExpMulti "/" ExpOneArg .                (rule 60)

	")"            reduce using rule 60
	","            reduce using rule 60
	";"            reduce using rule 60
	"||"           reduce using rule 60
	"&&"           reduce using rule 60
	"=="           reduce using rule 60
	"!="           reduce using rule 60
	"<"            reduce using rule 60
	">"            reduce using rule 60
	"<="           reduce using rule 60
	">="           reduce using rule 60
	"+"            reduce using rule 60
	"-"            reduce using rule 60
	"/"            reduce using rule 60
	"%"            reduce using rule 60
	"*"            reduce using rule 60


State 123

	Assig -> Var "=" ExpAddi .                          (rule 40)
	ExpAddi -> ExpAddi . "+" ExpMulti                   (rule 56)
	ExpAddi -> ExpAddi . "-" ExpMulti                   (rule 57)

	")"            reduce using rule 40
	","            reduce using rule 40
	";"            reduce using rule 40
	"+"            shift, and enter state 90
	"-"            shift, and enter state 91


State 124

	ExpSimp -> "(" "boolean" ")" . ExpOneArgNot         (rule 76)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArgNot   goto state 143
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 125

	ExpSimp -> "(" "double" ")" . ExpOneArgNot          (rule 78)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArgNot   goto state 142
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 126

	ExpSimp -> "(" "int" ")" . ExpOneArgNot             (rule 77)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	ExpOneArgNot   goto state 141
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 76

State 127

	ExpSimp -> "(" Exp ")" .                            (rule 75)

	")"            reduce using rule 75
	","            reduce using rule 75
	";"            reduce using rule 75
	"||"           reduce using rule 75
	"&&"           reduce using rule 75
	"=="           reduce using rule 75
	"!="           reduce using rule 75
	"<"            reduce using rule 75
	">"            reduce using rule 75
	"<="           reduce using rule 75
	">="           reduce using rule 75
	"+"            reduce using rule 75
	"-"            reduce using rule 75
	"/"            reduce using rule 75
	"%"            reduce using rule 75
	"*"            reduce using rule 75


State 128

	StmtComp -> "{" StmtList "}" .                      (rule 17)

	"int"          reduce using rule 17
	"double"       reduce using rule 17
	"boolean"      reduce using rule 17
	"void"         reduce using rule 17
	FalseLiteral   reduce using rule 17
	TrueLiteral    reduce using rule 17
	IntLiteral     reduce using rule 17
	DoubleLiteral  reduce using rule 17
	StringLiteral  reduce using rule 17
	"("            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"!"            reduce using rule 17
	"if"           reduce using rule 17
	"else"         reduce using rule 17
	"while"        reduce using rule 17
	"for"          reduce using rule 17
	"return"       reduce using rule 17
	Ident          reduce using rule 17


State 129

	StmtIf -> "if" "(" Exp . ")" Stmt                   (rule 26)
	StmtIf -> "if" "(" Exp . ")" Stmt "else" Stmt       (rule 27)

	")"            shift, and enter state 140


State 130

	StmtWhile -> "while" "(" Exp . ")" Stmt             (rule 28)

	")"            shift, and enter state 139


State 131

	StmtFor -> "for" "(" Assig . ";" Exp ";" Assig ")" Stmt    (rule 29)

	";"            shift, and enter state 138


State 132

	Assig -> Var . "=" ExpAddi                          (rule 40)
	Assig -> Var . "++"                                 (rule 41)
	Assig -> Var . "--"                                 (rule 42)

	"="            shift, and enter state 84
	"++"           shift, and enter state 85
	"--"           shift, and enter state 86


State 133

	StmtReturn -> "return" Exp ";" .                    (rule 31)

	"int"          reduce using rule 31
	"double"       reduce using rule 31
	"boolean"      reduce using rule 31
	"void"         reduce using rule 31
	FalseLiteral   reduce using rule 31
	TrueLiteral    reduce using rule 31
	IntLiteral     reduce using rule 31
	DoubleLiteral  reduce using rule 31
	StringLiteral  reduce using rule 31
	"("            reduce using rule 31
	"{"            reduce using rule 31
	"}"            reduce using rule 31
	"+"            reduce using rule 31
	"-"            reduce using rule 31
	"!"            reduce using rule 31
	"if"           reduce using rule 31
	"else"         reduce using rule 31
	"while"        reduce using rule 31
	"for"          reduce using rule 31
	"return"       reduce using rule 31
	Ident          reduce using rule 31


State 134

	ExpList -> Exp .                                    (rule 70)
	ExpList -> Exp . "," ExpList                        (rule 71)

	")"            reduce using rule 70
	","            shift, and enter state 137


State 135

	ExpCallFunc -> Ident "(" ExpList . ")"              (rule 69)

	")"            shift, and enter state 136


State 136

	ExpCallFunc -> Ident "(" ExpList ")" .              (rule 69)

	")"            reduce using rule 69
	","            reduce using rule 69
	";"            reduce using rule 69
	"||"           reduce using rule 69
	"&&"           reduce using rule 69
	"=="           reduce using rule 69
	"!="           reduce using rule 69
	"<"            reduce using rule 69
	">"            reduce using rule 69
	"<="           reduce using rule 69
	">="           reduce using rule 69
	"+"            reduce using rule 69
	"-"            reduce using rule 69
	"/"            reduce using rule 69
	"%"            reduce using rule 69
	"*"            reduce using rule 69


State 137

	ExpList -> Exp "," . ExpList                        (rule 71)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	")"            reduce using rule 72
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 134
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpList        goto state 149
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 138

	StmtFor -> "for" "(" Assig ";" . Exp ";" Assig ")" Stmt    (rule 29)

	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	Ident          shift, and enter state 66

	Exp            goto state 148
	ExpAssig       goto state 70
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 139

	StmtWhile -> "while" "(" Exp ")" . Stmt             (rule 28)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 147
	StmtComp       goto state 26
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 140

	StmtIf -> "if" "(" Exp ")" . Stmt                   (rule 26)
	StmtIf -> "if" "(" Exp ")" . Stmt "else" Stmt       (rule 27)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 146
	StmtComp       goto state 26
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 141

	ExpSimp -> "(" "int" ")" ExpOneArgNot .             (rule 77)

	")"            reduce using rule 77
	","            reduce using rule 77
	";"            reduce using rule 77
	"||"           reduce using rule 77
	"&&"           reduce using rule 77
	"=="           reduce using rule 77
	"!="           reduce using rule 77
	"<"            reduce using rule 77
	">"            reduce using rule 77
	"<="           reduce using rule 77
	">="           reduce using rule 77
	"+"            reduce using rule 77
	"-"            reduce using rule 77
	"/"            reduce using rule 77
	"%"            reduce using rule 77
	"*"            reduce using rule 77


State 142

	ExpSimp -> "(" "double" ")" ExpOneArgNot .          (rule 78)

	")"            reduce using rule 78
	","            reduce using rule 78
	";"            reduce using rule 78
	"||"           reduce using rule 78
	"&&"           reduce using rule 78
	"=="           reduce using rule 78
	"!="           reduce using rule 78
	"<"            reduce using rule 78
	">"            reduce using rule 78
	"<="           reduce using rule 78
	">="           reduce using rule 78
	"+"            reduce using rule 78
	"-"            reduce using rule 78
	"/"            reduce using rule 78
	"%"            reduce using rule 78
	"*"            reduce using rule 78


State 143

	ExpSimp -> "(" "boolean" ")" ExpOneArgNot .         (rule 76)

	")"            reduce using rule 76
	","            reduce using rule 76
	";"            reduce using rule 76
	"||"           reduce using rule 76
	"&&"           reduce using rule 76
	"=="           reduce using rule 76
	"!="           reduce using rule 76
	"<"            reduce using rule 76
	">"            reduce using rule 76
	"<="           reduce using rule 76
	">="           reduce using rule 76
	"+"            reduce using rule 76
	"-"            reduce using rule 76
	"/"            reduce using rule 76
	"%"            reduce using rule 76
	"*"            reduce using rule 76


State 144

	DeclList -> Decl "," DeclList .                     (rule 22)

	";"            reduce using rule 22


State 145

	Decl -> Var "=" Exp .                               (rule 24)

	","            reduce using rule 24
	";"            reduce using rule 24


State 146

	StmtIf -> "if" "(" Exp ")" Stmt .                   (rule 26)
	StmtIf -> "if" "(" Exp ")" Stmt . "else" Stmt       (rule 27)

	"int"          reduce using rule 26
	"double"       reduce using rule 26
	"boolean"      reduce using rule 26
	"void"         reduce using rule 26
	FalseLiteral   reduce using rule 26
	TrueLiteral    reduce using rule 26
	IntLiteral     reduce using rule 26
	DoubleLiteral  reduce using rule 26
	StringLiteral  reduce using rule 26
	"("            reduce using rule 26
	"{"            reduce using rule 26
	"}"            reduce using rule 26
	"+"            reduce using rule 26
	"-"            reduce using rule 26
	"!"            reduce using rule 26
	"if"           reduce using rule 26
	"else"         shift, and enter state 151
			(reduce using rule 26)

	"while"        reduce using rule 26
	"for"          reduce using rule 26
	"return"       reduce using rule 26
	Ident          reduce using rule 26


State 147

	StmtWhile -> "while" "(" Exp ")" Stmt .             (rule 28)

	"int"          reduce using rule 28
	"double"       reduce using rule 28
	"boolean"      reduce using rule 28
	"void"         reduce using rule 28
	FalseLiteral   reduce using rule 28
	TrueLiteral    reduce using rule 28
	IntLiteral     reduce using rule 28
	DoubleLiteral  reduce using rule 28
	StringLiteral  reduce using rule 28
	"("            reduce using rule 28
	"{"            reduce using rule 28
	"}"            reduce using rule 28
	"+"            reduce using rule 28
	"-"            reduce using rule 28
	"!"            reduce using rule 28
	"if"           reduce using rule 28
	"else"         reduce using rule 28
	"while"        reduce using rule 28
	"for"          reduce using rule 28
	"return"       reduce using rule 28
	Ident          reduce using rule 28


State 148

	StmtFor -> "for" "(" Assig ";" Exp . ";" Assig ")" Stmt    (rule 29)

	";"            shift, and enter state 150


State 149

	ExpList -> Exp "," ExpList .                        (rule 71)

	")"            reduce using rule 71


State 150

	StmtFor -> "for" "(" Assig ";" Exp ";" . Assig ")" Stmt    (rule 29)

	Ident          shift, and enter state 17

	Assig          goto state 153
	Var            goto state 132

State 151

	StmtIf -> "if" "(" Exp ")" Stmt "else" . Stmt       (rule 27)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 152
	StmtComp       goto state 26
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 152

	StmtIf -> "if" "(" Exp ")" Stmt "else" Stmt .       (rule 27)

	"int"          reduce using rule 27
	"double"       reduce using rule 27
	"boolean"      reduce using rule 27
	"void"         reduce using rule 27
	FalseLiteral   reduce using rule 27
	TrueLiteral    reduce using rule 27
	IntLiteral     reduce using rule 27
	DoubleLiteral  reduce using rule 27
	StringLiteral  reduce using rule 27
	"("            reduce using rule 27
	"{"            reduce using rule 27
	"}"            reduce using rule 27
	"+"            reduce using rule 27
	"-"            reduce using rule 27
	"!"            reduce using rule 27
	"if"           reduce using rule 27
	"else"         reduce using rule 27
	"while"        reduce using rule 27
	"for"          reduce using rule 27
	"return"       reduce using rule 27
	Ident          reduce using rule 27


State 153

	StmtFor -> "for" "(" Assig ";" Exp ";" Assig . ")" Stmt    (rule 29)

	")"            shift, and enter state 154


State 154

	StmtFor -> "for" "(" Assig ";" Exp ";" Assig ")" . Stmt    (rule 29)

	"int"          shift, and enter state 5
	"double"       shift, and enter state 6
	"boolean"      shift, and enter state 7
	"void"         shift, and enter state 8
	FalseLiteral   shift, and enter state 52
	TrueLiteral    shift, and enter state 53
	IntLiteral     shift, and enter state 54
	DoubleLiteral  shift, and enter state 55
	StringLiteral  shift, and enter state 56
	"("            shift, and enter state 57
	"{"            shift, and enter state 58
	"+"            shift, and enter state 59
	"-"            shift, and enter state 60
	"!"            shift, and enter state 61
	"if"           shift, and enter state 62
	"while"        shift, and enter state 63
	"for"          shift, and enter state 64
	"return"       shift, and enter state 65
	Ident          shift, and enter state 66

	Stmt           goto state 155
	StmtComp       goto state 26
	StmtDecl       goto state 28
	StmtAssig      goto state 29
	StmtIf         goto state 30
	StmtWhile      goto state 31
	StmtFor        goto state 32
	StmtReturn     goto state 33
	StmtExp        goto state 34
	Type           goto state 35
	Exp            goto state 36
	ExpAssig       goto state 37
	Assig          goto state 38
	ExpOr          goto state 39
	ExpAnd         goto state 40
	ExpCompe       goto state 41
	ExpRel         goto state 42
	ExpAddi        goto state 43
	ExpMulti       goto state 44
	ExpOneArg      goto state 45
	ExpOneArgNot   goto state 46
	ExpPostfix     goto state 47
	ExpCallFunc    goto state 48
	ExpSimp        goto state 49
	Literal        goto state 50
	Var            goto state 51

State 155

	StmtFor -> "for" "(" Assig ";" Exp ";" Assig ")" Stmt .    (rule 29)

	"int"          reduce using rule 29
	"double"       reduce using rule 29
	"boolean"      reduce using rule 29
	"void"         reduce using rule 29
	FalseLiteral   reduce using rule 29
	TrueLiteral    reduce using rule 29
	IntLiteral     reduce using rule 29
	DoubleLiteral  reduce using rule 29
	StringLiteral  reduce using rule 29
	"("            reduce using rule 29
	"{"            reduce using rule 29
	"}"            reduce using rule 29
	"+"            reduce using rule 29
	"-"            reduce using rule 29
	"!"            reduce using rule 29
	"if"           reduce using rule 29
	"else"         reduce using rule 29
	"while"        reduce using rule 29
	"for"          reduce using rule 29
	"return"       reduce using rule 29
	Ident          reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 86
Number of terminals: 41
Number of non-terminals: 36
Number of states: 156
